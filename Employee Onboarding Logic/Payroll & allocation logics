class salary(object):
    def __init__(self):
        self.__basicpay=5000

    def setbasicpay(self,basicpay):
        self.__basicpay=basicpay

    def getbasicpay(self):
        return self.__basicpay

    def calculatesalary(self):
        pass

class Employee(object):
    counter=1000
    def __init__(self, employeename, typeofemployee, telephoneno, skillset):
        self.__employeename=employeename
        self.__typeofemployee=typeofemployee
        self.__telephoneno=telephoneno
        self.__skillset=skillset
        self.__employeeid=None

        #Type - 1 -Check
        if(self.__typeofemployee=="P" or self.__typeofemployee=='p'):
            self.__employeeid=self.__typeofemployee+str(Employee.counter)
            # print(self.__employeeid)
            Employee.counter+=1
            # print(self.__employeeid)

        #Type - 2 -Check
        elif(self.__typeofemployee=='C' or self.__typeofemployee=='c'):
            self.__employeeid=self.__typeofemployee+str(self.__employeeid)
            self.__employeeid=int(self.__employeeid[1:])
            self.__employeeid=self.__employeeid+int(Employee.counter)
            

    def getemployee(self):  
        pass

    def getemployeename(self):
        return self.__employeename

    # def settypeofemployee(self, typeofemployee):
    #     self.__typeofemployee=typeofemployee

    def gettypeofemployee(self): 
        return self.__typeofemployee
    
    def gettelephoneno(self):
        return self.__telephoneno

    def getskillset(self):
        return self.__skillset

    def validatetelephoneno(self):
        if(len(str(self.__telephoneno))==10):
            a=str(self.__telephoneno)
            if(a[0]==str(1)):
                return True 
            else:
                return False
        else:
            return False
            
class PermanentEmployee(Employee, salary):
    def __init__(self,employeename,typeofemployee,telephoneno,skillset,yearsofexperience):
        self.__yearsofexperience=yearsofexperience
        self.__allowance=None
        self.__salary=None
        super().__init__(employeename,typeofemployee,telephoneno,skillset)
        
    def validatetypeofemployee(self):
        if(self.gettypeofemployee()=='P' or self.gettypeofemployee()=='p'): ##Need to see
            return True
        else:
            return False
        
    def calculatesalary(self):
        s1=salary()
        if(self.validatetelephoneno()==True):
            if(self.validatetypeofemployee()==True):
                if(self.__yearsofexperience >= 15):
                    self.__allowance = (self.getbasicpay() * (20/100))
                elif(self.__yearsofexperience >=10 and self.__yearsofexperience < 15):
                    self.__allowance = (self.getbasicpay() * (10/100))
                elif(self.__yearsofexperience >=5 and self.__yearsofexperience <10):
                    self.__allowance = (self.getbasicpay() * (5/100))
                    print(self.__allowance)
            else:
                print("Invalid Employee type")
        else:
            print("Invalid Telephone number")

        #Calculate salary
        # self.__salary = self.__allowance + self.getbasicpay()


class consultant(Employee, salary):
    def __init__(self,employeename,typeofemployee,telephoneno,skillset,noofhours):
        self.noofhours=noofhours
        self.payrateperhour=None
        self.consultantfee=None
        super().__init__(employeename,typeofemployee,telephoneno,skillset)
    
    def calculatesalary(self):
        if(self.validatetelephoneno()==True):
            if(self.gettypeofemployee()=='C' or self.gettypeofemployee=='c'):
                if(self.getskillset() in ('jee','JEE') or self.getskillset() in ('ms','MS')):
                    if(self.getskillset() in ('jee' or 'JEE')):
                        self.payrateperhour=500
                        # return self.payrateperhour
                    elif(self.getskillset() in ('ms','MS')):
                        self.payrateperhour=350
                        return self.payrateperhour
                    else:
                        self.payrateperhour=250
                else:
                    print("Not a valid skillset")
            else:
                print("Not a valid Employee")
        else:
            print("Not a valid Telephone number")
                

# Aggregation 
class Project(Employee):
    counter=5000
    def __init__(self):
        self.__projectid=None
        self._employee=Employee
        self.__projecttechnology=['jee','JEE','ms','MS']

    def Project(self):
        pass

    def allocateproject(self,Employee):
        elijible=None
        if(Employee.gettypeofemployee() in ('P','p','C','c')):
            for i in range(0,len(self.__projecttechnology)):
                if(Employee.getskillset() == self.__projecttechnology[i]):
                    self.__projectid="P"+str(Project.counter)
                    Project.counter+=1
                    elijible=str("You are allocated to Project ID:" +str(self.__projectid))
                    return elijible
                else:
                    pass
            else:
                return "You do not have a valid skillset"
        else:
            return "You are not a Valid Employeee"





# emp1=Employee('sri','P',1487191619,'Python')
# emp2=Employee('var','P',1667431899,'ms')
# emp3=Employee('bala','P',1667431899,'ms')

# print(emp1.validatetelephoneno())

# sal1=salary()

# pemp1=PermanentEmployee('sri','P',1487191619,'Python',6)
# print(pemp1.validatetypeofemployee()) 
# print(pemp1.calculatesalary())

# cemp1=consultant('sri','C',1487191619,'ms',2)
# print(cemp1.calculatesalary())

# proj1=Project()
# print(proj1.allocateproject(emp2))
# print(proj1.allocateproject(emp2), proj1.allocateproject(emp3))
